#ifndef OSC_H
#define OSC_H
#define PI 3.1415

// enum describes the type of oscillator
enum OSC_TYPE{
    OSC_SINE,
    OSC_SQUARE,
    OSC_TRIANGLE,
    OSC_SAW,
    OSC_NOISE
};

/*
 In Frequency Modulation a modulating/information wave is used to modulate the frequency of a carrier wave
which drastically changes how the wave sounds by making it more complex
*/
enum OSC_TYPE carrier; // the type of the carrier wave
enum OSC_TYPE mod; // the type of the modulating wave

// gets the angular velocity from the frequency
double toAng(double f){
    return f * 2.0 * PI;
}

/* 
this function applies other functions to a frequency to convert it into a wave
the type of wave generated by the function depends on the oscillator type required
*/
double osc(enum OSC_TYPE oscT, double f){
    switch(oscT){
        // Sine wave
        case OSC_SINE: return sin(f);
        // Square wave 
        case OSC_SQUARE: return (sin(f) * globalTime > 1) ? 1 : -1; // binary value gathered from sin wave
        // Triangle wave
        case OSC_TRIANGLE: return asin(sin(f)); // arcsin of a sin wave
        // Generate white noise from pseudo-random input
        case OSC_NOISE:
        if(f != 0)
            return (2.0 * ((double)rand() / (double)RAND_MAX) - 1.0);
        else
            return 0;
        // if not valid return nothing
        default : return 0.0;
    }
}

#endif //OSC_H
